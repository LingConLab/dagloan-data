ec2 <- complete.cases[(ec$evidentiality),]
ec2 <- [complete.cases(ec$evidentiality),]
ec <- read_tsv("ec.csv")
rm(ec2)
map.feature(ec$language,
features = ec$aff,
stroke.features = ec$evidentiality,
tile = c("Esri.WorldTopoMap"))
library(lingtypology)
library(tidyverse)
ec <- read_tsv("ec.csv")
ec$aff <- factor(ec$aff, levels = c("Nakh", "Avar", "Andic", "Tsezic", "Lak", "Dargwa", "Lezgic", "Khinalugh"))
ec$evidentiality <- factor(ec$evidentiality, levels = c("+", "-"))
map.feature(ec$language,
features = ec$aff,
tile = c("Esri.WorldTopoMap"),
color = ec$color_aff,
stroke.features = ec$evidentiality,
stroke.color = c("black", "white"),
title = "Branch",
stroke.title = "Evidential")
all <- read_tsv("allev.csv")
map.feature(all$Language,
features = all$Language,
latitude = all$Lat,
longitude = all$Lon,
tile = c("Esri.WorldTopoMap"),
color = all$color,
legend = F)
View(ec)
all <- read_tsv("allev.csv")
map.feature(all$Language,
features = all$Language,
latitude = all$Lat,
longitude = all$Lon,
tile = c("Esri.WorldTopoMap"),
color = all$color,
legend = F)
all <- read_tsv("allev.csv")
map.feature(all$Language,
features = all$Language,
latitude = all$Lat,
longitude = all$Lon,
tile = c("Esri.WorldTopoMap"),
color = all$color,
legend = F)
map.feature(all$Language,
features = all$Language,
latitude = all$Lat,
longitude = all$Lon,
tile = c("Esri.WorldTopoMap"),
color = all$color,
opacity = 0.5,
legend = F,
stroke.features = all$evidentiality)
map.feature(all$Language,
features = all$Language,
latitude = all$Lat,
longitude = all$Lon,
tile = c("Esri.WorldTopoMap"),
color = all$color,
opacity = 0.8,
legend = F,
stroke.features = all$evidentiality)
map.feature(all$Language,
features = all$Language,
latitude = all$Lat,
longitude = all$Lon,
tile = c("Esri.WorldTopoMap"),
color = all$color,
opacity = 0.3,
legend = F,
stroke.features = all$evidentiality)
all$evidentiality <- factor(all$evidentiality, levels = c("+", "-"))
map.feature(all$Language,
features = all$Language,
latitude = all$Lat,
longitude = all$Lon,
tile = c("Esri.WorldTopoMap"),
color = all$color,
opacity = 0.3,
legend = F,
stroke.features = all$evidentiality,
stroke.title = "Evidential",
stroke.color = c("black", "white"))
map.feature(ec$language,
features = ec$aff,
tile = c("Esri.WorldTopoMap"),
color = ec$color_aff,
stroke.features = ec$evidentiality,
stroke.color = c("black", "white"),
title = "Branch",
stroke.title = "Evidential",
isogloss = as.data.frame(ec[,"evidentiality"]),
isogloss.longitude.width = 1.5,
isogloss.latitude.width = 1.5)
install.packages("xaringan")
getwd()
rm(list=ls())
library(tidyverse)
loan <- read_tsv("archibezhta.csv")
loan_shortlist <- loan[(loan$shortlist=='1'),]
loan_shortlist <- loan_shortlist[!duplicated(loan_shortlist$english),]
loan_nonshort <- loan[!duplicated(loan$english),]
rutul <- read_tsv("rutul.csv")
rutul2 <- rutul[!duplicated(rutul$name),]
a <- intersect(loan_nonshort$english, rutul2$name)
a <- data.frame(intersect(loan_nonshort$english, rutul2$name))
View(a)
b <- data.frame(loan_shortlist$english)
c <- full_join(a, b, by = 'english')
colnames(a)[1] <- "english"
colnames(b)[1] <- "english"
c <- full_join(a, b, by = 'english')
View(c)
a$x <- rep("a", 1:219)
a$x <- rep("a", 219)
b$x <- rep("b", 149)
c <- full_join(a, b, by = 'english')
View(c)
loan <- read_tsv("archibezhta.csv")
loan_common <- loan[(loan$shortlist=='1'),]
count(loan_common$borrowing_type)
View(loan_common)
View(loan_common)
loan_common2 <- loan_common[!duplicated(loan_common$english),]
rm(list=ls())
library(tidyverse)
library(dplyr)
archibezhta <- read_tsv("archibezhta2.csv")
library(dplyr)
count(archibezhta$borrowing_type)
a <- data.frame(count(archibezhta$borrowing_type))
count(archibezhta, borrowing_type)
a <- data.frame(count(archibezhta, borrowing_type))
View(archibezhta)
b <- data.frame(count(archibezhta, borrowing_type_1))
View(a)
sum(a$n)
1564-310
a$percentage <- (a$n/1254*100)
View(a)
sum(b$n)
View(b)
1564-95
b$percentage <- (b$n/1469*100)
library(tidyverse)
colnames(a)[1] <- "loan"
colnames(b)[1] <- "loan"
longlist <- full_join(a, b, by "loan")
longlist <- full_join(a, b, by = "loan")
View(longlist)
View(archibezhta)
View(b)
archibezhta <- read_tsv("archibezhta2.csv")
a <- data.frame(count(archibezhta, borrowing_type))
sum(a$n)
a$percentage <- (a$n/1254*100)
colnames(a)[1] <- "loan"
b <- data.frame(count(archibezhta, borrowing_type_1))
b$percentage <- (b$n/1469*100)
colnames(b)[1] <- "loan"
longlist <- full_join(a, b, by = "loan")
View(longlist)
colnames(longlist)[2] <- "archi"
colnames(longlist)[4] <- "bezhta"
colnames(longlist)[3] <- "archi%"
colnames(longlist)[5] <- "bezhta%"
write.csv(longlist, "longlist.csv")
--------------
shortlist <- archibezhta[(archibezhta$shortlist=='1'),]
View(archibezhta)
--------------
shortlist <- archibezhta[(archibezhta$shortlist =='1'),]
--------------
shortlist <- archibezhta[(archibezhta$shortlist=='1'),]
archibezhta$shortlist
--------------
shortlist <- archibezhta[(archibezhta$shortlist=='1'),]
library(tidyverse)
--------------
shortlist <- archibezhta[(archibezhta$shortlist=='1'),]
--------------
shortlist <- archibezhta[ which(archibezhta$shortlist=='1'), ]
--------------
shortlist <- archibezhta[ which(archibezhta$shortlist > 0), ]
--------------
shortlist <- data.frame([(archibezhta$shortlist=='1'),])
--------------
shortlist <- data.frame(archibezhta[(archibezhta$shortlist=='1'),])
archibezhta <- read_tsv("archibezhta2.csv")
a <- data.frame(count(archibezhta, borrowing_type))
a$percentage <- (a$n/1254*100)
colnames(a)[1] <- "loan"
b <- data.frame(count(archibezhta, borrowing_type_1))
b$percentage <- (b$n/1469*100)
colnames(b)[1] <- "loan"
View(longlist)
colnames(longlist)[3] <- "archi%"
colnames(longlist)[5] <- "bezhta%"
--------------
shortlist <- archibezhta[(archibezhta$shortlist == '1'),]
View(archibezhta)
--------------
shortlist <- archibezhta[(archibezhta$shortlist == '1'),]
--------------
shortlist <- archibezhta[(archibezhta$shortlist == "1"),]
library(tidyverse)
shortlist <- read_tsv("archibezhta3.csv")
View(archibezhta)
shortlist <- read_tsv("archibezhta3.csv")
View(shortlist)
a_short data.frame(count(shortlist, borrowing_type))
a_short <- data.frame(count(shortlist, borrowing_type))
View(a_short)
sum(a_short$n)
251-39
a_short$percentage <- (a_short$n/212*100)
View(a_short)
b_short <- data.frame(count(shortlist, borrowing_type_1))
sum(b_short$n)
View(b_short)
251-6
b_short$percentage <- (b_short$n/245*100)
View(b_short)
colnames(a_short)[1] <- "loan"
colnames(b_short)[1] <- "loan"
shortlist <- full_join(a_short, b_short, by = "loan")
View(shortlist)
colnames(shortlist) <- c("loan", "archi", "archi%", "bezhta", "bezhta%")
View(shortlist)
write.csv(shortlist, "shortlist.csv")
shortlist$`archi%` <- round(shortlist$`archi%`)
View(shortlist)
shortlist$`bezhta%`<- round(shortlist$`bezhta%`)
write.csv(shortlist, "shortlist.csv")
longlist$`archi%` <- round(longlist$`archi%`)
longlist$`bezhta%`<- round(longlist$`bezhta%`)
write.csv(longlist, "longlist.csv")
View(longlist)
View(shortlist)
shortlist <- read_tsv("archibezhta3.csv")
------
short_horizontal <- count(shortlist, archi_source_language)
------
short_horizontal <- data.frame(count(shortlist, archi_source_language))
------
horizontal <- data.frame(count(shortlist, archi_source_language))
------
c <- data.frame(count(shortlist, borrowing_type_1))
------
rm(list=ls())
library(tidyverse)
read_tsv("avar_area.csv")
avar_area <- read_tsv("avar_area.csv")
andi <- read_tsv("andi.csv")
full_avar_area <- full_join(avar_area, andi, by = "english")
View(andi)
andi <- read_tsv("andi.csv")
View(andi)
andi <- read_tsv("andi.csv")
View(andi)
full_avar_area <- full_join(avar_area, andi, by = "english")
write.csv(full_avar_area, "full_avar_area.csv")
kusur <- read_tsv("kusur.csv")
full_avar_area2 <- full_join(full_avar_area, kusur, by = "english")
write.csv(full_avar_area2, "full_avar_area.csv")
View(avar_area)
View(andi)
a <- read.csv("avar_area.csv", sep = "{Tab}")
a <- read.csv("avar_area.csv", sep = {Tab})
a <- read.csv("avar_area.csv", sep = "\t")
View(a)
avar_area <- read.csv("avar_area.csv", sep = "\t")
andi <-  read.csv("andi.csv", sep = "\t")
kusur <- read.csv("kusur.csv", sep = "\t")
library(tidyverse)
View(avar_area)
View(andi)
full_avar_area <- full_join(avar_area, andi, by = "english")
View(full_avar_area)
full_avar_area2 <- full_join(full_avar_area, kusur, by = "english")
write.csv(full_avar_area2, "full_avar_comma.csv", sep = "\t")
write.csv(full_avar_area2, "full_avar_comma.csv")
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(echo = FALSE,
message=FALSE,
warning= FALSE,
fig.width=10.4,
fig.height=7)
library(tidyverse)
library(lingtypology)
library(phangorn)
library(knitr)
dist <- read_csv("rutul_dist.csv")
kable(dist[1:3,1:3], format = "html")
dist <- read_csv("rutul_dist.csv")
kable(dist[1:3], format = "html")
dist <- read_csv("rutul_dist.csv")
kable(dist[,1:3], format = "html")
dist <- read_csv("rutul_dist.csv", sep = ";")
dist <- read.csv("rutul_dist.csv", sep = ";")
kable(dist[,1:3], format = "html")
dist <- read.csv("rutul_dist.csv", sep = ";")
kable(dist[1:4,1:3], format = "html")
sim <- read_tsv("similarity.csv")
kable(sim, format = "html")
library(tidyverse)
avar_zone <- ("full_zone.csv")
avar_zone <- read_tsv("full_zone.csv")
a <- !duplicated(avar_zone[avar_zone$english,])
a <- unique(avar_zone[avar_zone$english,])
View(a)
a <- unique(avar_zone[,avar_zone$english])
a <- unique(avar_zone[,avar_zone$english])
library(tidyverse)
avar_zone <- read_tsv("full_zone.csv")
archi_avar <- avar_zone[(avar_zone$Archi_source == 'Avar'),]
archi_avar2 <- archi_avar[!is.na(archi_avar$Archi_source),]
bezhta_avar <- avar_zone[(avar_zone$Bezhta_source == 'Avar'),]
bezhta_avar2 <- bezhta_avar[!is.na(bezhta_avar$Bezhta_source),]
zilo_avar <- avar_zone[(avar_zone$Zilo_source == 'Avar'),]
zilo_avar2 <- zilo_avar[!is.na(zilo_avar$Zilo_source),]
botlikh_avar <- avar_zone[(avar_zone$Botlikh_source == 'Avar'),]
botlikh_avar2 <- botlikh_avar[!is.na(botlikh_avar$Botlikh_source),]
avar_intersect <- Reduce(intersect, list(archi_avar2$english, bezhta_avar2$english,
zilo_avar2$english, botlikh_avar2$english))
avar_intersect <- Reduce(intersect, list(archi_avar2$english, bezhta_avar2$english))
avar_intersect <-Reduce(intersect, list(zilo_avar2$english, botlikh_avar2$english))
avar_borrowings <- full_join(archi_avar2, bezhta_avar2, by = c("english"))
avar_borrowings <- full_join(avar_borrowings, botlikh_avar2, by = c("english"))
avar_borrowings <- full_join(avar_borrowings, zilo_avar2, by = c("english"))
b <-
b <- unique(avar_borrowings$english)
View(archi_avar2)
archi_avar2 <- archi_avar2[1;3;4,]
archi_avar2 <- archi_avar2[c(1,3,4),]
View(archi_avar2)
archi_avar <- avar_zone[(avar_zone$Archi_source == 'Avar'),]
archi_avar2 <- archi_avar[!is.na(archi_avar$Archi_source),]
archi_avar2 <- archi_avar2[,c(1,3,4)]
View(bezhta_avar2)
bezhta_avar2 <- bezhta_avar2[,c(1,6,7)]
View(zilo_avar2)
zilo_avar2 <- zilo_avar2[,c(1,9,11)]
View(botlikh_avar2)
botlikh_avar2 <- botlikh_avar2[,c(1,12,13)]
avar_borrowings <- full_join(archi_avar2, bezhta_avar2, by = c("english"))
avar_borrowings <- full_join(avar_borrowings, botlikh_avar2, by = c("english"))
avar_borrowings <- full_join(avar_borrowings, zilo_avar2, by = c("english"))
View(avar_borrowings)
write.csv(avar_borrowings, "avar_borrowings.csv")
install.packages("VennDiagram")
getwd()
setwd("~/dagloan-data")
library(tidyverse)
archibezhta <- read_tsv("archibezhta.csv")
setwd("~/home/samira")
archibezhta <- read_tsv("archibezhta.csv")
getwd()
setwd("/home/samira/")
archibezhta <- read_tsv("archibezhta.csv")
View(archibezhta)
archi_count <- count(archibezhta, archi_source_language)
View(archi_count)
bezhta_count <- count(archibezhta, bezhta_source_language)
archibezhta_short <- archibezhta[(archibezhta$shortlist == '1'),]
archi_count_short <- count(archibezhta_short, archi_source_language)
bezhta_count_short <- count(archibezhta_short, bezhta_source_language)
archi_count2 <- cbind(archi_count, archi_count_short)
View(archi_count2)
archi_count <- cbind(archi_count, archi_count_short)
archi_count <- cbind(archi_count, archi_count_short)
bezhta_count <- cbind(bezhta_count, bezhta_count_short)
bezhta_count2 <- cbind(bezhta_count, bezhta_count_short)
View(bezhta_count)
write.csv(archi_count, "archi_count.csv")
write.csv(bezhta_count, "bezhta_count.csv")
write.csv(bezhta_count_short, "bezhta_count_short.csv")
getwd()
library(VennDiagram)
View(avar_borrowings)
library(tidyverse)
avar_borrowings <- read_tsv("avar_borrowings.csv")
View(avar_borrowings)
archi_avar <- avar_borrowings[!is.na(avar_borrowings$Archi),]
bezhta_avar <- avar_borrowings[!is.na(avar_borrowings$Bezhta),]
botlikh_avar <- avar_borrowings[!is.na(avar_borrowings$Botlikh),]
zilo_avar <- avar_borrowings[!is.na(avar_borrowings$Zilo),]
venn.diagram(
x = list(archi_avar$english, bezhta_avar$english, botlikh_avar$english, zilo_avar$english),
category.names = c("Archi" , "Bezhta" , "Botlikh", "Zilo"),
filename = '#14_venn_diagramm.png',
output = TRUE ,
imagetype="png" ,
height = 480 ,
width = 480 ,
resolution = 300,
compression = "lzw",
lwd = 2,
lty = 'blank',
fill = c('yellow', 'purple', 'green'),
cex = 1,
fontface = "bold",
fontfamily = "sans",
cat.cex = 0.6,
cat.fontface = "bold",
cat.default.pos = "outer",
cat.pos = c(-27, 27, 135),
cat.dist = c(0.055, 0.055, 0.085),
cat.fontfamily = "sans",
rotation = 1
)
venn.diagram(
x = list(archi_avar$english, bezhta_avar$english, botlikh_avar$english, zilo_avar$english),
category.names = c("Archi" , "Bezhta" , "Botlikh", "Zilo"),
filename = '#14_venn_diagramm.png',
output = TRUE ,
imagetype="png")
draw.quad.venn(
x = list(archi_avar$english, bezhta_avar$english, botlikh_avar$english, zilo_avar$english),
category.names = c("Archi" , "Bezhta" , "Botlikh", "Zilo"),
filename = '#14_venn_diagramm.png',
output = TRUE ,
imagetype="png")
zone <- read_tsv("full_zone.csv")
View(zone)
count(zone, Zilo_source)
rm(list=ls())
setwd("/home/samira/dagloan-data")
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(echo = FALSE,
message=FALSE,
warning= FALSE,
fig.width=10.4,
fig.height=7)
library(tidyverse)
library(lingtypology)
library(phangorn)
library(knitr)
Rutul_SV <- read.csv("Rutul_SV.csv", header = TRUE, sep = ";", na.strings = "NA")
Rutul_SV <- as.dist(Rutul_SV)
nnet <- neighborNet(Rutul_SV)
plot(nnet, "2D")
sim <- read_tsv("similarity.csv")
kable(sim, format = "html")
library(phangorn)
setwd("/home/samira/dagloan-data")
avar <- read.csv("avar_dist.csv", header = TRUE, sep = ";", na.strings = "NA")
avar <- as.dist(avar)
nnet <- neighborNet(avar)
avar <- read.csv("avar_dist.csv", header = TRUE, sep = ";", na.strings = "NA")
avar <- as.dist(avar)
nnet <- neighborNet(avar)
avar <- read.csv("avar_dist.csv", header = TRUE, sep = ";", na.strings = "NA")
avar <- as.dist(avar)
nnet <- neighborNet(avar)
avar <- read.csv("avar_dist.csv", header = TRUE, sep = ";", na.strings = "NA")
avar <- as.dist(avar)
nnet <- neighborNet(avar)
avar <- read.csv("avar_dist.csv", header = TRUE, sep = ";", na.strings = "NA")
avar <- as.dist(avar)
nnet <- neighborNet(avar)
plot(nnet, "2D")
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(echo = FALSE,
message=FALSE,
warning= FALSE,
fig.width=10.4,
fig.height=7)
library(tidyverse)
library(lingtypology)
library(phangorn)
library(knitr)
count <- read_tsv("loancount.csv")
colnames(count) <- c("Archi", "WOLD", "%", "short", "%",
"Bezhta", "WOLD", "%", "short", "%")
kable(count[,1:5], format = "html")
count <- read_tsv("loancount.csv")
colnames(count) <- c("Archi", "WOLD", "%", "short", "%",
"Bezhta", "WOLD", "%", "short", "%")
kable(count[,6:10], format = "html")
# general area map
loan <- read_csv("loan_villages.csv")
map.feature(loan$Language,
features = loan$Language,
tile = c("Esri.OceanBasemap"),
color = loan$color,
latitude = loan$Lat,
longitude = loan$Lon,
title = "Language",
label = loan$EngNames,
label.hide = F,
zoom.control = T)
sim <- read_tsv("similarity2.csv")
kable(sim, format = "html")
sim <- read_tsv("similarity.csv")
kable(sim, format = "html")
dist <- read.csv("rutul_dist.csv", sep = ";")
kable(dist[1:4,1:3], format = "html")
Rutul_SV <- read.csv("Rutul_SV.csv", header = TRUE, sep = ";", na.strings = "NA")
Rutul_SV <- as.dist(Rutul_SV)
nnet <- neighborNet(Rutul_SV)
plot(nnet, "2D")
Rutul_MD <- read.csv("Rutul_MD.csv", header = TRUE, sep = ";", na.strings = "NA")
Rutul_MD <- as.dist(Rutul_MD)
nnet <- neighborNet(Rutul_MD)
plot(nnet, "2D")
nnet
nnet$splitIndex
nnet$Nnode
getwd()
